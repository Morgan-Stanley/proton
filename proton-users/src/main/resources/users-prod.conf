akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"

  extensions = [
    "de.heikoseeberger.constructr.akka.ConstructrExtension",
    "akka.cluster.pubsub.DistributedPubSub"
  ]

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  remote {
    netty.tcp {
      hostname = ${proton.ip}
      port = ${proton.port}
    }
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo
    }

    kryo {
      post-serialization-transformations = off
      kryo-custom-serializer-init = "proton.users.UsersKryoSerializerInit"
    }
  }
}

cassandra {
  contact-point = "cassandra"
  contact-point = ${?CASSANDRA_CONTACT_POINT}
  contact-points = [${cassandra.contact-point}]
}

cassandra-journal {
  contact-points = ${cassandra.contact-points}
}

cassandra-snapshot-store {
  contact-points = ${cassandra.contact-points}
}

constructr {
  coordination {
    class-name = "de.heikoseeberger.constructr.coordination.etcd.EtcdCoordination"
    host = "etcd-client"
    host = ${?CONSTRUCTR_COORDINATION_HOST}
    port = 2379
  }

  coordination-timeout = 3 seconds  // Maximum response time for coordination service (e.g. etcd)
  max-nr-of-seed-nodes = 0          // Any nonpositive value means Int.MaxValue
  nr-of-retries        = 2          // Nr. of tries are nr. of retries + 1
  refresh-interval     = 30 seconds // TTL is refresh-interval * ttl-factor
  retry-delay          = 3 seconds  // Give coordination service (e.g. etcd) some delay before retrying
  ttl-factor           = 2.0        // Must be greater or equal 1 + ((coordination-timeout * (1 + nr-of-retries) + retry-delay * nr-of-retries)/ refresh-interval)!

  join-timeout = 15 seconds // Might depend on cluster size and network properties
}

proton {
  ip = "127.0.0.1"
  port = 2552
  port = ${?PORT_2552}
  http.timeout = 55 seconds
  cluster.shards = 10

  users.http {
    port = 8081
    port = ${?PORT_8081}
  }
}